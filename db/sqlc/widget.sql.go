// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: widget.sql

package db

import (
	"context"
)

const createWidget = `-- name: CreateWidget :one
insert into "widget"
(
  "name",
  "user_id"
)
values
(
  $1,
  $2
)
returning id, name, user_id, created_at
`

type CreateWidgetParams struct {
	Name   string `json:"name"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CreateWidget(ctx context.Context, arg CreateWidgetParams) (Widget, error) {
	row := q.db.QueryRowContext(ctx, createWidget, arg.Name, arg.UserID)
	var i Widget
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWidget = `-- name: DeleteWidget :exec
delete from "widget"
 where id = $1
`

func (q *Queries) DeleteWidget(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWidget, id)
	return err
}

const getWidget = `-- name: GetWidget :one
select id, name, user_id, created_at
  from "widget"
 where id = $1
 limit 1
`

func (q *Queries) GetWidget(ctx context.Context, id int64) (Widget, error) {
	row := q.db.QueryRowContext(ctx, getWidget, id)
	var i Widget
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listWidgets = `-- name: ListWidgets :many
select id, name, user_id, created_at
  from "widget"
 order by id
 limit $1
offset $2
`

type ListWidgetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWidgets(ctx context.Context, arg ListWidgetsParams) ([]Widget, error) {
	rows, err := q.db.QueryContext(ctx, listWidgets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Widget
	for rows.Next() {
		var i Widget
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWidget = `-- name: UpdateWidget :one
update "widget" set
  "name" = $2
 where id = $1
returning id, name, user_id, created_at
`

type UpdateWidgetParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateWidget(ctx context.Context, arg UpdateWidgetParams) (Widget, error) {
	row := q.db.QueryRowContext(ctx, updateWidget, arg.ID, arg.Name)
	var i Widget
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
