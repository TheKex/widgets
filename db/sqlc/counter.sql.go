// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: counter.sql

package db

import (
	"context"
	"database/sql"
)

const createCounter = `-- name: CreateCounter :one
insert into "counter"
(
  "widget_id",
  "order",
  "value",
  "increment"
)
values
(
  $1,
  $2,
  $3,
  $4
)
returning id, widget_id, "order", value, increment
`

type CreateCounterParams struct {
	WidgetID  int64         `json:"widget_id"`
	Order     sql.NullInt32 `json:"order"`
	Value     sql.NullInt32 `json:"value"`
	Increment sql.NullInt32 `json:"increment"`
}

func (q *Queries) CreateCounter(ctx context.Context, arg CreateCounterParams) (Counter, error) {
	row := q.db.QueryRowContext(ctx, createCounter,
		arg.WidgetID,
		arg.Order,
		arg.Value,
		arg.Increment,
	)
	var i Counter
	err := row.Scan(
		&i.ID,
		&i.WidgetID,
		&i.Order,
		&i.Value,
		&i.Increment,
	)
	return i, err
}

const deleteCounter = `-- name: DeleteCounter :exec
delete from "counter"
 where id = $1
`

func (q *Queries) DeleteCounter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCounter, id)
	return err
}

const getCounter = `-- name: GetCounter :one
select id, widget_id, "order", value, increment
  from "counter"
 where id = $1
`

func (q *Queries) GetCounter(ctx context.Context, id int64) (Counter, error) {
	row := q.db.QueryRowContext(ctx, getCounter, id)
	var i Counter
	err := row.Scan(
		&i.ID,
		&i.WidgetID,
		&i.Order,
		&i.Value,
		&i.Increment,
	)
	return i, err
}

const listCounters = `-- name: ListCounters :many
select id, widget_id, "order", value, increment
  from "counter"
 order by id
 limit $1
offset $2
`

type ListCountersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCounters(ctx context.Context, arg ListCountersParams) ([]Counter, error) {
	rows, err := q.db.QueryContext(ctx, listCounters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Counter{}
	for rows.Next() {
		var i Counter
		if err := rows.Scan(
			&i.ID,
			&i.WidgetID,
			&i.Order,
			&i.Value,
			&i.Increment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCounter = `-- name: UpdateCounter :one
update "counter" set
  "order" = $2,
  "value" = $3,
  "increment" = $4
where id = $1
returning id, widget_id, "order", value, increment
`

type UpdateCounterParams struct {
	ID        int64         `json:"id"`
	Order     sql.NullInt32 `json:"order"`
	Value     sql.NullInt32 `json:"value"`
	Increment sql.NullInt32 `json:"increment"`
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) (Counter, error) {
	row := q.db.QueryRowContext(ctx, updateCounter,
		arg.ID,
		arg.Order,
		arg.Value,
		arg.Increment,
	)
	var i Counter
	err := row.Scan(
		&i.ID,
		&i.WidgetID,
		&i.Order,
		&i.Value,
		&i.Increment,
	)
	return i, err
}

const updateCounterValue = `-- name: UpdateCounterValue :one
update "counter" set
  value = $1
where id = $2
returning id, widget_id, "order", value, increment
`

type UpdateCounterValueParams struct {
	Value sql.NullInt32 `json:"value"`
	ID    int64         `json:"id"`
}

func (q *Queries) UpdateCounterValue(ctx context.Context, arg UpdateCounterValueParams) (Counter, error) {
	row := q.db.QueryRowContext(ctx, updateCounterValue, arg.Value, arg.ID)
	var i Counter
	err := row.Scan(
		&i.ID,
		&i.WidgetID,
		&i.Order,
		&i.Value,
		&i.Increment,
	)
	return i, err
}
